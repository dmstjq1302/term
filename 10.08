import tkinter as tk
import requests
from PIL import Image, ImageTk
from datetime import datetime, timedelta

# Matplotlib 라이브러리에서 그래프 관련 도구들을 가져옵니다.
import matplotlib

matplotlib.use("TkAgg")  # Tkinter와 Matplotlib를 연결
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.dates as mdates


# --- 함수 정의 ---

def get_exchange_rates():
    """API 서버에 접속해서 최신 환율 정보를 가져오는 함수"""
    url = "https://open.er-api.com/v6/latest/KRW"
    try:
        response = requests.get(url)
        data = response.json()
        if data["result"] == "success":
            global exchange_rates
            exchange_rates = data["rates"]
            print("최신 환율 정보를 성공적으로 가져왔습니다.")
            # 성공 시, 텍스트와 그래프를 모두 포함한 전체 업데이트를 한번 실행
            update_all_displays()
    except Exception as e:
        print("API 접속 오류:", e)


def get_historical_data(base_currency, target_currency, days=30):
    """지정된 기간 동안의 과거 환율 데이터를 API로 가져오는 함수"""
    today = datetime.now()
    start_day = today - timedelta(days=days)
    start_date = start_day.strftime('%Y-%m-%d')
    url = f"https://api.frankfurter.app/{start_date}..?from={base_currency}&to={target_currency}"
    try:
        response = requests.get(url)
        data = response.json()
        if 'rates' in data:
            dates_str = sorted(data['rates'].keys())
            dates = [datetime.strptime(d, '%Y-%m-%d') for d in dates_str]
            rates = [data['rates'][d][target_currency] for d in dates_str]
            return dates, rates
    except Exception as e:
        print("과거 데이터 API 접속 오류:", e)
    return None, None


def draw_graph(dates, rates):
    """Matplotlib를 사용해 전문적인 스타일의 그래프를 그리는 함수"""
    for widget in graph_frame.winfo_children():
        widget.destroy()

    if not dates or not rates or len(rates) < 2:
        error_label = tk.Label(graph_frame, text="그래프 데이터를 표시할 수 없습니다.", font=("맑은 고딕", 16), bg="white")
        error_label.pack(expand=True)
        return

    # 차트 헤더, 기간 버튼, 메인 그래프 생성 
    header_frame = tk.Frame(graph_frame, bg="white");
    header_frame.pack(fill="x", padx=10, pady=(10, 0))
    from_code = from_var.get()
    flag_img = tk_flag_images.get(from_code)
    if flag_img: tk.Label(header_frame, image=flag_img, bg="white").pack(side="left")
    tk.Label(header_frame, text=f"{currency_data[from_code]['name']} {from_code}", font=("맑은 고딕", 12, "bold"),
             bg="white").pack(side="left", padx=(5, 10))
    current_rate = rates[-1];
    prev_rate = rates[-2];
    change = current_rate - prev_rate;
    change_percent = (change / prev_rate) * 100
    tk.Label(header_frame, text=f"{current_rate:,.2f}", font=("맑은 고딕", 20, "bold"), bg="white").pack(side="left")
    change_color = "red" if change < 0 else "blue";
    change_symbol = "▼" if change < 0 else "▲"
    tk.Label(header_frame, text=f"{change_symbol} {change:,.2f} ({change_percent:.2f}%)", font=("맑은 고딕", 10),
             bg="white", fg=change_color).pack(side="left", pady=(5, 0))
    button_frame = tk.Frame(graph_frame, bg="white");
    button_frame.pack(fill="x", padx=10)
    periods = {"1개월": 30, "3개월": 90, "1년": 365}
    for text, days in periods.items():
        btn = tk.Button(button_frame, text=text, font=("맑은 고딕", 9), relief="flat", bg="white",
                        command=lambda d=days: update_chart_by_period(d));
        btn.pack(side="left")

    fig = Figure(figsize=(5, 3), dpi=100, facecolor="white");
    ax = fig.add_subplot(111)
    ax.plot(dates, rates, color='royalblue', linewidth=1.5);
    ax.fill_between(dates, rates, color='royalblue', alpha=0.1)
    max_rate = max(rates);
    min_rate = min(rates);
    max_date = dates[rates.index(max_rate)];
    min_date = dates[rates.index(min_rate)]
    ax.annotate(f'최고 {max_rate:,.2f}', xy=(max_date, max_rate), xytext=(max_date, max_rate + (max_rate * 0.005)),
                arrowprops=dict(facecolor='black', shrink=0.05, width=0.5, headwidth=4), fontsize=8)
    ax.annotate(f'최저 {min_rate:,.2f}', xy=(min_date, min_rate), xytext=(min_date, min_rate - (max_rate * 0.005)),
                arrowprops=dict(facecolor='black', shrink=0.05, width=0.5, headwidth=4), fontsize=8)
    padding = (max_rate - min_rate) * 0.1;
    ax.set_ylim(min_rate - padding, max_rate + padding)
    ax.set_facecolor("white");
    ax.spines['top'].set_visible(False);
    ax.spines['right'].set_visible(False)
    ax.grid(True, linestyle='--', alpha=0.6);
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'));
    fig.tight_layout()
    canvas = FigureCanvasTkAgg(fig, master=graph_frame);
    canvas.draw();
    canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))


def update_chart_by_period(days=30):
    """기간 선택에 맞춰 그래프만 새로 그리는 함수"""
    from_code = from_var.get()
    to_code = to_var.get()
    dates, rates = get_historical_data(from_code, to_code, days)
    draw_graph(dates, rates)


def update_conversion_display(*args):
    # UI의 텍스트 부분만 업데이트
    from_code = from_var.get()
    if from_code in currency_data:
        data = currency_data[from_code]
        from_flag_label.config(image=tk_flag_images.get(from_code))
        from_country_label.config(text=data['name']);
        from_code_label.config(text=from_code)
        amount_str = amount_var.get().replace(',', '')
        from_formatted_label.config(text=format_korean_currency(amount_str, data['symbol']))

    to_code = to_var.get()
    if to_code in currency_data:
        data = currency_data[to_code]
        to_flag_label.config(image=tk_flag_images.get(to_code))
        to_country_label.config(text=data['name']);
        to_code_label.config(text=to_code)

    # 실시간 환율 계산
    amount_str_no_comma = amount_var.get().replace(',', '')
    if not amount_str_no_comma or not exchange_rates:
        to_amount_label.config(text="");
        to_formatted_label.config(text="")
        return
    try:
        amount = float(amount_str_no_comma)
        from_rate = exchange_rates[from_code];
        to_rate = exchange_rates[to_code]
        converted_amount = (amount / from_rate) * to_rate
        to_amount_label.config(text=f"{converted_amount:,.2f}")
        to_formatted_label.config(text=format_korean_currency(str(converted_amount), currency_data[to_code]['symbol']))
    except (ValueError, KeyError):
        to_amount_label.config(text="계산 불가");
        to_formatted_label.config(text="")


def update_all_displays(*args):
    update_conversion_display()  # 먼저 텍스트를 업데이트하고
    update_chart_by_period()  # 그 다음에 그래프를 업데이트


def format_korean_currency(amount_str, symbol):
    """숫자를 한글 단위로 변환하는 함수"""
    try:
        num = int(float(amount_str))
    except (ValueError, TypeError):
        return ""
    if num == 0: return ""
    if len(str(num)) > 8:
        return f"{num // 100000000}억 {num % 100000000:,} {symbol}"
    elif len(str(num)) > 4:
        return f"{num // 10000}만 {num % 10000:,} {symbol}"
    else:
        return f"{num:,} {symbol}"


def show_page(page_name):
    """지정된 페이지만 보여주고, 메뉴 버튼 스타일을 업데이트하는 함수"""
    for name, items in menu_items.items():
        button = items['button'];
        underline = items['underline'];
        page = items['page']
        if name == page_name:
            button.config(fg="black", font=("맑은 고딕", 12, "bold"));
            underline.pack(fill="x", padx=10, pady=(0, 5));
            page.tkraise()
        else:
            button.config(fg="gray", font=("맑은 고딕", 12, "bold"));
            underline.pack_forget()


# --- 데이터 준비 ---
exchange_rates = {};
currency_data = {
    'USD': {'name': '미국', 'symbol': '달러', 'flag': 'image/us.png'},
    'KRW': {'name': '대한민국', 'symbol': '원', 'flag': 'image/kr.png'},
    'JPY': {'name': '일본', 'symbol': '엔', 'flag': 'image/jp.png'},
    'EUR': {'name': '유로존', 'symbol': '유로', 'flag': 'image/eur.png'},
    'CNY': {'name': '중국', 'symbol': '위안', 'flag': 'image/cn.png'}
};
currency_codes = list(currency_data.keys())

# --- GUI 창 설정 ---
window = tk.Tk();
window.title("실시간 환율 정보");
window.geometry("850x700");
window.config(bg="white")

# --- 이미지 로드 ---
tk_flag_images = {}
for code, data in currency_data.items():
    try:
        img = Image.open(data['flag']).resize((40, 26));
        tk_flag_images[code] = ImageTk.PhotoImage(img)
    except FileNotFoundError:
        print(f"이미지 파일 없음: {data['flag']}")

# --- 변수 선언 및 trace 연결 수정 ---
amount_var = tk.StringVar(window, value="1")
from_var = tk.StringVar(window, value='USD')
to_var = tk.StringVar(window, value='KRW')

# 금액 입력은 가벼운 함수만 호출
amount_var.trace("w", update_conversion_display)
# 국가 변경은 무거운 함수(그래프 포함) 호출
from_var.trace("w", update_all_displays)
to_var.trace("w", update_all_displays)

# --- 레이아웃 구조 생성 ---
sidebar_container = tk.Frame(window);
sidebar_container.pack(side="left", fill="y")
sidebar_frame = tk.Frame(sidebar_container, bg="#F5F5F5", width=150);
sidebar_frame.pack(side="left", fill="y");
sidebar_frame.pack_propagate(False)
sidebar_separator = tk.Frame(sidebar_container, bg="#D0D0D0", width=1);
sidebar_separator.pack(side="right", fill="y")
content_frame = tk.Frame(window, bg="white");
content_frame.pack(side="right", fill="both", expand=True)
content_frame.grid_rowconfigure(0, weight=1);
content_frame.grid_columnconfigure(0, weight=1)

# --- 페이지 1: 환율 변환 페이지) ---
exchange_page = tk.Frame(content_frame, bg="white");
exchange_page.grid(row=0, column=0, sticky="nsew")
converter_frame = tk.Frame(exchange_page, bg="white");
converter_frame.pack(anchor="nw", pady=20, padx=20)
from_frame = tk.Frame(converter_frame, bg="white", highlightbackground="#E0E0E0", highlightthickness=1);
from_frame.pack(pady=(0, 10), fill="x")
from_left_frame = tk.Frame(from_frame, bg="white", width=150, height=120);
from_left_frame.pack_propagate(False);
from_left_frame.pack(side="left", padx=10, pady=10)
from_left_frame.grid_rowconfigure((0, 1, 2, 3), weight=1);
from_left_frame.grid_columnconfigure(0, weight=1)
from_flag_label = tk.Label(from_left_frame, bg="white");
from_flag_label.grid(row=0, column=0)
from_country_label = tk.Label(from_left_frame, text="미국", bg="white", font=("맑은 고딕", 12, "bold"));
from_country_label.grid(row=1, column=0)
from_code_label = tk.Label(from_left_frame, text="USD", bg="white", font=("맑은 고딕", 10), fg="gray");
from_code_label.grid(row=2, column=0)
from_dropdown = tk.OptionMenu(from_left_frame, from_var, *currency_codes);
from_dropdown.config(bg="white", relief="flat", highlightthickness=0, width=5, borderwidth=0, indicatoron=True);
from_dropdown.grid(row=3, column=0)
separator1 = tk.Frame(from_frame, bg="#E0E0E0", width=1);
separator1.pack(side="left", fill="y", pady=10)
from_right_frame = tk.Frame(from_frame, bg="white");
from_right_frame.pack(side="right", fill="both", expand=True, padx=10, pady=10)
amount_entry = tk.Entry(from_right_frame, textvariable=amount_var, font=("맑은 고딕", 20, "bold"), justify="right",
                        relief="flat", bg="white");
amount_entry.pack(fill="x", expand=True)
from_formatted_label = tk.Label(from_right_frame, text="", font=("맑은 고딕", 10), fg="gray", bg="white", anchor="e");
from_formatted_label.pack(fill="x")
to_frame = tk.Frame(converter_frame, bg="white", highlightbackground="#E0E0E0", highlightthickness=1);
to_frame.pack(pady=5, fill="x")
to_left_frame = tk.Frame(to_frame, bg="white", width=150, height=120);
to_left_frame.pack_propagate(False);
to_left_frame.pack(side="left", padx=10, pady=10)
to_left_frame.grid_rowconfigure((0, 1, 2, 3), weight=1);
to_left_frame.grid_columnconfigure(0, weight=1)
to_flag_label = tk.Label(to_left_frame, bg="white");
to_flag_label.grid(row=0, column=0)
to_country_label = tk.Label(to_left_frame, text="대한민국", bg="white", font=("맑은 고딕", 12, "bold"));
to_country_label.grid(row=1, column=0)
to_code_label = tk.Label(to_left_frame, text="KRW", bg="white", font=("맑은 고딕", 10), fg="gray");
to_code_label.grid(row=2, column=0)
to_dropdown = tk.OptionMenu(to_left_frame, to_var, *currency_codes);
to_dropdown.config(bg="white", relief="flat", highlightthickness=0, width=5, borderwidth=0, indicatoron=True);
to_dropdown.grid(row=3, column=0)
separator2 = tk.Frame(to_frame, bg="#E0E0E0", width=1);
separator2.pack(side="left", fill="y", pady=10)
to_right_frame = tk.Frame(to_frame, bg="white");
to_right_frame.pack(side="right", fill="both", expand=True, padx=10, pady=10)
to_amount_label = tk.Label(to_right_frame, text="", font=("맑은 고딕", 20, "bold"), bg="white", anchor="e");
to_amount_label.pack(fill="x", expand=True)
to_formatted_label = tk.Label(to_right_frame, text="", font=("맑은 고딕", 10), fg="gray", bg="white", anchor="e");
to_formatted_label.pack(fill="x")
graph_frame = tk.Frame(exchange_page, bg="white");
graph_frame.pack(fill="both", expand=True, padx=20, pady=(10, 20))

# --- 페이지 2: 환율 포커스 페이지 ---
focus_page = tk.Frame(content_frame, bg="white");
focus_page.grid(row=0, column=0, sticky="nsew")
focus_title_label = tk.Label(focus_page, text="환율 포커스", font=("맑은 고딕", 24, "bold"), bg="white");
focus_title_label.pack(pady=50)

# --- 사이드바 메뉴 버튼 생성 ---
menu_items = {}
exchange_menu_item = tk.Frame(sidebar_frame, bg="#F5F5F5");
exchange_menu_item.pack(pady=(20, 5), padx=10, fill="x")
btn_exchange = tk.Button(exchange_menu_item, text="환율", font=("맑은 고딕", 12, "bold"), relief="flat", bg="#F5F5F5",
                         activebackground="#E0E0E0", command=lambda: show_page("exchange"));
btn_exchange.pack()
underline_exchange = tk.Frame(exchange_menu_item, height=2, bg="black");
menu_items['exchange'] = {'button': btn_exchange, 'underline': underline_exchange, 'page': exchange_page}
focus_menu_item = tk.Frame(sidebar_frame, bg="#F5F5F5");
focus_menu_item.pack(pady=5, padx=10, fill="x")
btn_focus = tk.Button(focus_menu_item, text="환율 포커스", font=("맑은 고딕", 12, "bold"), relief="flat", bg="#F5F5F5",
                      activebackground="#E0E0E0", command=lambda: show_page("focus"));
btn_focus.pack()
underline_focus = tk.Frame(focus_menu_item, height=2, bg="black");
menu_items['focus'] = {'button': btn_focus, 'underline': underline_focus, 'page': focus_page}

# --- 프로그램 시작 ---
show_page("exchange")
get_exchange_rates()
window.mainloop()
